#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

struct Les {
	int x, y;
	Les(int x, int y) {
		this->x = x;
		this->y = y;
	}
};

int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };
vector <vector <int> > map;
int dis[1000][1000];
int main() {

	ios::sync_with_stdio(false);

	queue <Les> q;

	int n, m, a, b, cnt = 0;
	cin >> m >> n;

	for (int i = 0; i < n; i++) {
		vector <int> arr(m);
		for (int j = 0; j < m; j++) {
			cin >> arr[j];
			if (arr[j] == 0) cnt++;
			else if (arr[j] == 1) {
				q.push(Les(i, j));
			}
		}
		map.push_back(arr);
	}
	if (cnt == 0) {
		cout << 0;
		exit(0);
	}

	while (!q.empty()) {
		Les tmp = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			int a = tmp.x + dx[i];
			int b = tmp.y + dy[i];
			if (a >= 0 && a < n && b >= 0 && b < m) {
				if (map[a][b] == 0) {
					q.push(Les(a, b));
					map[a][b] = 1;
					dis[a][b] = dis[tmp.x][tmp.y] + 1;
					cnt--;
					if (cnt == 0) {
						cout << dis[a][b];
						exit(0);
					}
				}
			}
		}
	}
	cout << -1;

	return 0;
}
